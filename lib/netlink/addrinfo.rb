# frozen_string_literal: true

require 'socket'
require 'forwardable'

module Netlink
  # AddrInfo for {Netlink::Socket}.
  class Addrinfo
    attr_reader :afamily, :pid, :groups

    # @param [Array,String] sockaddr array form should be compatible to the value of
    # {Socket#addr}. The string should be struct sockaddr as generated by {{Socket.sockaddr_nl}}.
    def initialize(sockaddr)
      case sockaddr
      when Array
        init_from_array(sockaddr)
      when String
        init_from_string(sockaddr)
      else
        TypeError.new('sockaddr must be a String or an Array')
      end
    end

    # returns the socket address as packed struct sockaddr string
    # @return [String]
    def to_sockaddr
      Socket.sockaddr_nl(@pid, @groups)
    end
    alias to_s to_sockaddr
    alias to_str to_sockaddr

    private

    def init_from_array(ary)
      check_family(ary[0])
      check_u32(ary[1])
      check_u32(ary[2])
      @afamily = Socket::AF_NETLINK
      @pid = ary[1]
      @groups = ary[2]
    end

    def init_from_string(str)
      ary = str.unpack('SSLL')
      ary.delete_at(1)
      init_from_array(ary)
    end

    def check_family(family)
      golden = case family
               when String
                 'AF_NETLINK'
               when Integer
                 Socket::AF_NETLINK
               else
                 raise TypeError, "no implicit conversion of #{family.class} to Integer/String"
               end
      raise SocketError, "unknown address family: #{family}" unless family == golden
    end

    def check_u32(value)
      raise TypeError, "no implicit conversion of #{value.class} to Integer" unless value.is_a?(Integer)
    end
  end
end
